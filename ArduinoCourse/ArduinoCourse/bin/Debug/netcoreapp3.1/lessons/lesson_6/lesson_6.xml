<Lesson>
  <Title>Урок 6. Cтягивающий и подтягивающий резисторы</Title>
  <Theories>
    <Theory>
      <Title>6.1) Список деталей</Title>
      <Text>Для повторения примеров главы понадобятся следующие детали:
• плата Arduino Uno;
• макетная плата;
• перемычки;
• 1 резистор номиналом 10 кОм;
• 3 резистора номиналом 220 Ом;
• кабель USB;
• кнопка;
• одноцветный светодиод 5 мм;
• RGB-светодиод 5 мм с общим катодом.
У большинства плат Arduino нет аналоговых выходов, но их можно эмулировать с помощью широтно-импульсной модуляции (ШИМ).
Далее мы расскажем, как сформировать ШИМ-сигнал.
Прочитав главу, вы сможете создать ночник на RGB-светодиоде.
Проект с мигающим светодиодом, рассмотренный в предыдущей главе, скорее игрушка, чем полезное устройство.
Действительно привлекательной для разработчиков делает платформу Arduino наличие контактов ввода-вывода.
К плате можно подключить, например, геркон, и при открытии двери проигрывать какую-либо мелодию или создать электронный сейф, или несложный музыкальный инструмент.
В этом уроке вы приступите к разработке новых проектов: познакомитесь с возможностями цифровых входов Arduino, узнаете о подтягивающих (pull-up) и стягивающих (pull-down) резисторах и научитесь управлять цифровыми выходами.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>6.2) Считывание данных с цифровых контактов</Title>
      <Text>Рассмотрим еще одну функцию цифровых контактов. 
До сих пор мы использовали их в качестве выходов, генерируя цифровой сигнал и ШИМ-сигнал. 
Следующий шаг - функционирование контактов платы Arduino в качестве входов. 
Это позволит подключить, например, переключатели и кнопки для взаимодействия со своим устройством в режиме реального времени.
В этом разделе вы научитесь считывать значения на входе, узнаете о стягивающих и подтягивающих резисторах, сможете обрабатывать в программе нажатие кнопки.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>6.3) Считывание цифровых входов со стягивающим резистором</Title>
      <Text>Изменим схему, изображенную на рисунке 1. 
Подключим к цифровому контакту кнопку и стягивающий резистор, в результате схема примет вид, представленный на рисунке 2.
Совет: Проверьте, что шины питания и земли обеих плат надежно соединены друг с другом.
Тогда в дальнейшем вы сможете легко менять элементы на макетной плате.
Прежде чем написать программу опроса состояния кнопки, важно понять назначение резистора в этой схеме.
Почти для всех цифровых входов необходим дополнительный стягивающий (pull-down) или подтягивающий (pull-up) резисторы для установки "значения по умолчанию" на входном контакте.
Представьте себе, что в схеме на рисунке 2 нет резистора 10 кОм.
В этом случае при нажатии на кнопку на выводе будет значение HIGH. Но что происходит, когда кнопка не нажата?
В такой ситуации входной контакт не привязан ни к чему, как говорят, "висит в воздухе".
А поскольку вывод физически не подключен ни к 0 В, ни к 5 В, чтение значения может дать неожиданный результат.
Электрические помехи на близлежащих выводах могут привести к тому, что значение напряжения будет колебаться между HIGH и LOW.
Чтобы предотвратить это, стягивающий резистор подключают так, как показано на рисунке 2.
Посмотрим, что происходит, когда кнопка не нажата, а входной контакт подключен через стягивающий резистор 10 кОм к земле. 
Через резистор протекает ток утечки и на входном контакте будет установлено значение напряжения LOW. 
10 кОм - довольно распространенный номинал для стягивающего резистора.
При нажатии на кнопку входной контакт оказывается напрямую связан с шиной 5 В.
Теперь ток может течь двумя путями:
• через практически нулевое сопротивление нажатой кнопки к шине 5 В;
• через высокое сопротивление резистора на землю.
В соответствии с законом Ома ток всегда будет идти по пути наименьшего сопротивления.
Большая часть тока будет протекать через замкнутую кнопку и на входе установится уровень HIGH.</Text>
      <Pics>
        <Pic>\lessons\lesson_3\pic\pic6.1.jpg</Pic>
        <Pic>\lessons\lesson_3\pic\pic6.5.jpg</Pic>
      </Pics>
    </Theory>
    <Theory>
      <Title>6.4) Примечание</Title>
      <Text>В рассмотренном примере используется стягивающий резистор, но возможна установка и подтягивающего резистора, подключенного к шине 5 В, тогда кнопка должна быть соединена с землей.
В таком случае на входном контакте будет значение HIGH при отпущенной кнопке и значение LOW, когда кнопка нажата.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>6.5) Слова перед листингом</Title>
      <Text>Стягивающие и подтягивающие резисторы важны, потому что они гарантируют, что кнопка не создаст короткое замыкание между 5 В и землей при нажатии и что входной контакт не останется в "подвешенном" состоянии.
Теперь напишем программу для рассмотренной схемы. 
Светодиод должен гореть, пока кнопка нажата, и быть выключенным, когда кнопка отжата.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>6.6) Листинг 6.1. Включение светодиода с помощью кнопки — led_button.ino</Title>
      <Text>const int LED = 9; // Контакт 9 для подключения светодиода
const int BUTTON = 2; // Контакт 2 для подключения кнопки
void setup()
{
	pinMode (LED, OUTPUT); // Сконфигурировать контакт светодиода как выход
	pinMode (BUTTON, INPUT); // Сконфигурировать контакт кнопки как вход
}
void loop()
{
	if (digitalRead(BUTTON) == LOW)
	{
		digitalWrite(LED, LOW);
	}
	else
	{
		digitalWrite(LED, HIGH);
	}
}</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>6.7) Комментарии к листингу 6.1</Title>
      <Text>В коде листинга 6.1 реализованы некоторые новые элементы: функция digitalRead() и оператор if-else.
Константа BUTTON типа int добавлена для контакта кнопки. Кроме того, в функции setup() конфигурируем контакт BUTTON как вход.
Это необязательно, т. к. выводы Arduino являются входами по умолчанию.
Функция digitalRead() считывает значение сигнала на входе.
Если кнопка нажата, digitalRead() возвращает значение HIGH (лог. 1).
Если кнопка не нажата, то получаем LOW (лог. 0).
Проверяем содержимое внутри оператора if(). Если условие внутри оператора if() истинно (кнопка не нажата, digitalRead() ==LOW), вызываем функцию digitalWrite (LED, LOW) (гасим светодиод).
В противном случае (кнопка нажата) выполняем код после оператора else (включаем светодиод функцией digitalWrite(LED, HIGH)).
Вот и все! Загружаем данный код на плату Arduino и убеждаемся, что все работает, как и ожидалось.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>Итоги</Title>
      <Text>В этом уроке вы узнали о следующем:
•Как работать с макетной платой.
•Как выбрать резистор для ограничения тока светодиода.
•Как подключить внешний светодиод к плате Arduino.
•Как использовать ШИМ, как замену аналогового вывода.
•Как считывать состояние кнопки.
•Как подавить дребезг кнопки.
•Для чего нужны подтягивающий и стягивающий резисторы.</Text>
      <Pics />
    </Theory>
  </Theories>
  <Tests>
    <Test>
      <Title>6.1)Что делает функция digitalRead?</Title>
      <Pics />
      <Text></Text>
      <Variants>
        <Variant>задает значение сигнала на выходе</Variant>
        <Variant>считывает значение сигнала на выходе</Variant>
        <Variant>считывает значение сигнала на входе</Variant>
        <Variant>считывает напряжение на входе</Variant>
      </Variants>
      <Answer>2</Answer>
    </Test>
	
	<Test>
      <Title>6.2)Что такое стягивающий резистор?</Title>
      <Pics />
      <Text>1 - резистор соединяющий нужный нам участок цепи с плюсом (+).
2 - Резистор соединяющий нужный нам участок цепи с нулём (землёй, GND).
3 - Резистор уменьшающий напряжение на участке цепи для измерения.
4 - Резистор уменьшающий напряжение на участке цепи.</Text>
      <Variants>
       <Variant>1</Variant>
        <Variant>2</Variant>
        <Variant>3</Variant>
        <Variant>4</Variant>
      </Variants>
      <Answer>1</Answer>
    </Test>
	<Test>
      <Title>6.3)Что такое подтягивающий резистор?</Title>
      <Pics />
      <Text>1 - Резистор соединяющий нужный нам участок цепи с плюсом (+).
2 - Резистор соединяющий нужный нам участок цепи с нулём (землёй, GND).
3 - Считывает значение сигнала на входе
4 - Считывает напряжение на входе</Text>
      <Variants>
        <Variant>1</Variant>
        <Variant>2</Variant>
        <Variant>3</Variant>
        <Variant>4</Variant>
      </Variants>
      <Answer>0</Answer>
    </Test>
	
  </Tests>
</Lesson>