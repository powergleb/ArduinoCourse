<Lesson>
  <Title>Урок 4. Ночник на RGB-светодиоде</Title>
  <Theories>
    <Theory>
      <Title>4.1) Список деталей</Title>
      <Text>Для повторения примеров главы понадобятся следующие детали:
• плата Arduino Uno;
• макетная плата;
• перемычки;
• 1 резистор номиналом 10 кОм;
• 3 резистора номиналом 220 Ом;
• кабель USB;
• кнопка;
• одноцветный светодиод 5 мм;
• RGB-светодиод 5 мм с общим катодом.
У большинства плат Arduino нет аналоговых выходов, но их можно эмулировать с помощью широтно-импульсной модуляции (ШИМ).
Далее мы расскажем, как сформировать ШИМ-сигнал.
Прочитав теорию, вы сможете создать ночник на RGB-светодиоде.
Проект с мигающим светодиодом, рассмотренный в предыдущей главе, скорее игрушка, чем полезное устройство.
Действительно привлекательной для разработчиков делает платформу Arduino наличие контактов ввода-вывода.
К плате можно подключить, например, геркон, и при открытии двери проигрывать какую-либо мелодию или создать электронный сейф, или несложный музыкальный инструмент.
В этом уроке вы приступите к разработке новых проектов: познакомитесь с возможностями цифровых входов Arduino, узнаете о подтягивающих (pull-up) и стягивающих (pull-down) резисторах и научитесь управлять цифровыми выходами.</Text>
      <Pics />
    </Theory>    
    <Theory>
      <Title>4.2) Использование цикла, теория</Title>
      <Text>На практике часто необходимо циклически изменять значения переменных для выполнения заданного алгоритма.
В предыдущем примере можно реализовать цикл, чтобы увидеть, как влияют на частоту мигания разные значения задержки.
Вы можете реализовать разные скорости мигания, задавая с помощью переменной цикла различные значения задержки.
Пример иллюстрирует код из листинга 4.1 (далее).</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>4.3) Листинг 4.1. Изменение частоты мигания светодиода</Title>
      <Text>const int LED = 9; // Константа - номер контакта светодиода
void setup()
{
	pinMode (LED, OUTPUT); // Конфигурируем контакт светодиода как выход
}
void loop()
{
	for (int i = 100; i &lt;= 1000; i = i + 100)
	{
		digitalWrite(LED, HIGH);
		delay(i);
		digitalWrite(LED, LOW);
		delay(i);
	}
}</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>4.4) Пояснение к листингу 4.1</Title>
      <Text>Скомпилируйте код листинга 4.1, загрузите его на свою плату Arduino и посмотрите, что происходит.
Теперь разберемся, как это работает.
Оператор for всегда содержит три выражения, разделенные точкой с запятой:
• первое выражение присваивает начальное значение переменной-счетчику цикла.
В нашем примере переменная i получает начальное значение 100;
• второе выражение указывает, когда цикл должен остановиться. Операторы в теле цикла будут выполняться снова и снова, пока условие истинно.
Запись &lt;= означает меньше или равно.
Таким образом, этот цикл будет выполняться тех пор, пока переменная i меньше или равна 1000;
• последнее выражение указывает, что должно произойти с переменной i каждый раз после выполнения операторов тела цикла.
В нашем примере, значение счетчика цикла увеличивается на 100.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>4.5) Пошаговый разбор листинга 4.1</Title>
      <Text>Чтобы лучше понять работу оператора for, подробно рассмотрим, что происходит за два прохода цикла:
1. Значение переменной i равно 100, 100 меньше или равно 1000, значит выполнять код в теле цикла.
2. На контакте 9 установлено значение HIGH, светодиод горит 100 мс (текущее значение i).
3. На контакт 9 подано значение LOW, светодиод потушен 100 мс (текущее значение i).
4. В конце цикла значение переменной i увеличивается на 100, теперь i равно 200.
5. 200 меньше или равно 1000, цикл повторяется снова.
6. На контакте 9 установлено значение HIGH, светодиод горит 200 мс (текущее значение i).
7. На контакт 9 подано значение LOW, светодиод потушен 200 мс (текущее значение i).
8. В конце цикла значение переменной i увеличивается на 100, теперь i равно 300.
9. Этот процесс повторяется, пока i не превосходит 1000 и затем i снова принимает значение 100 и все повторяется заново.
Итак, вы разобрались с работой цифровых контактов платы Arduino.
Далее разберемся, как с помощью ШИМ сформировать аналоговые сигналы на цифровых контактах платы Arduino.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>Итоги</Title>
      <Text>В этом уроке вы узнали о следующем:
•Как использовать цикл в Ардуино.
•Как подать ток на светодиод.
•Как подключить внешний светодиод к плате Arduino.
•Как создать ночник из платы ардуино со светодиодом..</Text>
      <Pics />
    </Theory>
  </Theories>
  <Tests>
    <Test>
      <Title>Анализ листинга</Title>
      <Pics />
      <Text>
	  const int LED = 9; // Константа - номер контакта светодиода
void setup()
{
	pinMode (LED, OUTPUT); // Конфигурируем контакт светодиода как выход
}
void loop()
{
	for (int i = 100; i &lt;= 1000; i = i + 100)
	{
		digitalWrite(LED, HIGH);
		delay(i);
		digitalWrite(LED, LOW);
		delay(i);
	}
}
Запись &lt;= означает?</Text>
      <Variants>
        <Variant>больше</Variant>
        <Variant>меньше</Variant>
        <Variant>больше или равно</Variant>
        <Variant>меньше или равно</Variant>
      </Variants>
      <Answer>3</Answer>
    </Test>
	<Test>
      <Title>Анализ листинга</Title>
      <Pics />
      <Text>Какое начальное значение получает переменная i </Text>
      <Variants>
        <Variant>1000</Variant>
        <Variant>99</Variant>
        <Variant>88</Variant>
        <Variant>100</Variant>
      </Variants>
      <Answer>3</Answer>
    </Test>
  </Tests>
</Lesson>