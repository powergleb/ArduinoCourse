<Lesson>
  <Title>Урок 9.Считывание аналоговых данных с помощью Arduino</Title>
  <Theories>
    <Theory>
      <Title>9.1) Список деталей</Title>
      <Text>Для повторения примеров главы понадобятся следующие детали:
• плата Arduino Uno;
• макетная плата;
• перемычки;
• потенциометр 10 кОм;
• 2 резистора номиналом 10 кОм;
• 3 резистора номиналом 220 Ом;
• кабель USB;
• RGB-светодиод с общим катодом.

Теперь, когда вы понимаете, как преобразовать аналоговые сигналы в цифровые коды, можно начать писать программы и разрабатывать схемы.
У различных плат Arduino разное число аналоговых контактов.
Для чтения аналоговых значений предусмотрена функция analogRead().
Мы начнем с простых экспериментов с потенциометром и аналоговым датчиком.
Затем вы узнаете, как работают делители напряжения и как можно сделать свои собственные аналоговые датчики из компонентов, сопротивление которых зависит от каких-нибудь внешних факторов.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>9.2) Чтение данных с потенциометра</Title>
      <Text>Самый простой аналоговый датчик, с которого можно получить аналоговый сигнал, - это потенциометр.
Их используют в стереосистемах, звуковых колонках, термостатах и в других изделиях.
Потенцио́метр — жаргонное название переменного резистора, включенного как делитель электрического напряжения.
Под потенциометрами, как правило, подразумевают резисторы с подвижным отводным контактом, они всегда имеют три вывода.
Подключите один крайний вывод потенциометра к земле, а другой к шине 5 В.
Потенциометры симметричны, так что не имеет значения, с какой стороны вы подключите шину питания, а с какой землю.
Средний вывод соедините с аналоговым контактом 0 на плате Arduino. Как правильно подключить потенциометр к Arduino, показано на рисунке.
При повороте ручки потенциометра аналоговый входной сигнал будет плавно меняться от 0 до 5 В. В этом можно убедиться с помощью мультиметра.
Переведите мультиметр в режим измерения напряжения, подсоедините его, как показано на рисунке, и следите за показаниями, поворачивая ручку потенциометра.
Красный (положительный) щуп мультиметра должен быть подключен к среднему контакту потенциометра, а черный ( отрицательный) щуп к земле.</Text>
      <Pics>
        <Pic>\lessons\lesson_9\pic\pic9.1.jpg</Pic>
      </Pics>
    </Theory>
    <Theory>
      <Title>Листинг 9.1. Программа чтения данных потенциометра - pot.ino</Title>
      <Text>
	// Программа чтения данных с потенциометра
	const int POT=0; // Аналоговый вход 0 для подключения потенциометра
	int val = 0; // Переменная для хранения значения потенциометра
	void setup()
		{
		Serial.begin(9600);
		}
		void loop()
		{
		val = analogRead(POT);
		Serial.println(val);
		delay(500);
		}</Text>
      </Pics>
    </Theory>
	<Theory>
      <Title>9.3) Программа чтения данных потенциометра - pot.ino</Title>
      <Text>
Подробно функционирование последовательного интерфейса обмена данными мы рассмотрим в последующих уроках.
А сейчас достаточно знать, что сначала необходимо инициировать последовательное соединение, вызвав функцию Serial.begin(), единственный аргумент которой задает скорость передачи данных в бодах.
Скорость передачи данных определяет количество битов, передаваемых в секунду.
Высокая скорость передачи позволяет передавать больше данных за меньшее время, но может привести к ошибкам в некоторых системах связи.
В наших примерах выбрана скорость 9600 бод.
В каждой итерации цикла переменная val получает аналоговое значение, считанное командой analogRead() с входа, соединенного со средним контактом потенциометра (в нашем случае это вход A0).
Далее это значение функция serial.println() выводит в последовательный порт, соединенный с компьютером.
Затем следует задержка в полсекунды (чтобы числа выводились не быстрее, чем вы можете их прочитать).
После загрузки на плату Arduino вы заметите, что светодиод тх, расположенный на плате, мигает каждые 500 мс (по крайней мере, так должно быть).
Этот индикатор показывает, что плата Arduino передает данные через последовательный USB-интерфейс на компьютер.
Для просмотра данных подойдут любые терминальные программы, но в Arduino IDE есть встроенный монитор последовательного порта, для запуска которого нажмите кнопку, обведенную кружком на рисунке</Text>
       <Pics>
        <Pic>\lessons\lesson_9\pic\pic9.2.jpg</Pic>
	  </Pics>
    </Theory>
	<Theory>
      <Title>9.4) Отображение данных</Title>
      <Text>
После запуска монитора последовательного порта на экране компьютера появляется окно с отображением потока передаваемых чисел.
Поверните ручку потенциометра, и вы увидите, что выводимые значения меняются.
Если повернуть ручку в одном направлении, числа начинают приближаться к 0, если в другом - к 1023.
Пример отображения данных показан на рисунке</Text>
      <Pics>
        <Pic>\lessons\lesson_9\pic\pic9.3.jpg</Pic>
	  </Pics>
    </Theory>
	<Theory>
      <Title>Примечание</Title>
      <Text>
Если выводятся непонятные символы, убедитесь, что скорость передачи данных установлена правильно. 
В программе порт инициализирован на скорость 9600 бод, такое же значение необходимо установить в настройках монитора последовательного порта.
Итак, вы настроили получение аналоговых данных и смогли их изменять с помощью потенциометра, интересно, не правда ли? Но это только первый шаг.
Далее вы узнаете об иных типах аналоговых датчиков и о том, как с их помощью управлять другим оборудованием.
В этой главе будем снова управлять светодиодом, но в следующих главах рассмотрим двигатели и другие устройства.</Text>
	  </Pics>
    </Theory>
  </Theories>
  <Tests>
    <Test>
      <Title>9.1)Что такое потенциометр?</Title>
      <Pics />
      <Text>1 - Элемент автоматических устройств, который при воздействии на него внешних физических явлений скачкообразно принимает конечное число значений выходной величины.
2 - Устройство для накопления заряда и энергии электрического поля.
3 - Устройство считывающее значение сигнала на входе.
4 - Резистор с подвижным отводным контактом, включенный как делитель электрического напряжения. </Text>
      <Variants>
        <Variant>1</Variant>
        <Variant>2</Variant>
        <Variant>3</Variant>
        <Variant>4</Variant>
      </Variants>
      <Answer>3</Answer>
    </Test>
	 <Test>
      <Title>9.1)Что делает функция Serial.begin()?</Title>
      <Pics />
      <Text>1 - Останавливает выполнение программы на определенный интервал времени.
2 - Выводит номер цифрового контакта, к которому подключен светодиод на плате Arduino.
3 - Устройство считывающее значение сигнала на входе.
4 - Инициирует последовательное соединение.</Text>
      <Variants>
        <Variant>1</Variant>
        <Variant>2</Variant>
        <Variant>3</Variant>
        <Variant>4</Variant>
      </Variants>
      <Answer>3</Answer>
    </Test>
	 <Test>
      <Title>9.1)Что такое потенциометр?</Title>
      <Pics />
      <Text>1 - Элемент автоматических устройств, который при воздействии на него внешних физических явлений скачкообразно принимает конечное число значений выходной величины.
2 - Устройство для накопления заряда и энергии электрического поля.
3 - Устройство считывающее значение сигнала на входе.
4 - Резистор с подвижным отводным контактом, включенный как делитель электрического напряжения. </Text>
      <Variants>
        <Variant>1</Variant>
        <Variant>2</Variant>
        <Variant>3</Variant>
        <Variant>4</Variant>
      </Variants>
      <Answer>3</Answer>
    </Test>
  </Tests>
</Lesson>