<Lesson>
  <Title>Урок 3. Цифровые контакты ввода-вывода шиотно-импульсная модуляция</Title>
  <Theories>
    <Theory>
      <Title>3.1) Список деталей</Title>
      <Text>Для повторения примеров главы понадобятся следующие детали:
• плата Arduino Uno;
• макетная плата;
• перемычки;
• 1 резистор номиналом 10 кОм;
• 3 резистора номиналом 220 Ом;
• кабель USB;
• кнопка;
• одноцветный светодиод 5 мм;
• RGB-светодиод 5 мм с общим катодом.
У большинства плат Arduino нет аналоговых выходов, но их можно эмулировать с помощью широтно-импульсной модуляции (ШИМ).
Далее мы расскажем, как сформировать ШИМ-сигнал.
Прочитав главу, вы сможете создать ночник на RGB-светодиоде.
Проект с мигающим светодиодом, рассмотренный в предыдущей главе, скорее игрушка, чем полезное устройство.
Действительно привлекательной для разработчиков делает платформу Arduino наличие контактов ввода-вывода.
К плате можно подключить, например, геркон, и при открытии двери проигрывать какую-либо мелодию или создать электронный сейф, или несложный музыкальный инструмент.
В этом уроке вы приступите к разработке новых проектов: познакомитесь с возможностями цифровых входов Arduino, узнаете о подтягивающих (pull-up) и стягивающих (pull-down) резисторах и научитесь управлять цифровыми выходами.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>3.2) Цифровые контакты</Title>
      <Text>В главе 2 вы узнали, как заставить мигать светодиод, подключенный к цифровому контакту. Продолжим изучать возможности цифровых выходов Arduino и рассмотрим следующие темы:
• конфигурирование назначения цифровых выводов;
• подключение внешних компонентов;
• новые концепции программирования циклов и констант;
• различие между цифровыми и аналоговыми выходами;
• широтно-импульсная модуляция (ШИМ).</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>3.3) Подключение внешнего светодиода</Title>
      <Text>Мигающий светодиод из предыдущего примера был встроен в плату Arduino.
Теперь настало время выйти за пределы платы и соединить ее контакт 9 с внешним светодиодом.
Этот простой пример поможет вам понять, как собирать более сложные внешние цепи, описанные в следующих уроках.
Более того, контакт 9 Arduino позволяет формировать сигнал широтно-импульсной модуляции, что мы используем далее в этом уроке.
Рассмотрим, что такое макетная плата и как эффективно использовать ее для проектов из этой книги. Макетная плата - удобный инструмент для экспериментов, позволяющий легко собирать простые схемы без изготовления печатных плат и пайки.
С двух сторон по всей длине макетной платы расположены красные и синие
отверстия. Все красные отверстия соединены между собой и служат, как правило, для подачи питания. Для большинства проектов из этой книги это +5 В.
Все синие отверстия тоже электрически соединены друг с другом и играют роль шины заземления.
Каждые пять отверстий, расположенных вертикальными рядами, также соединены друг с другом.
Посередине есть свободное место для удобства установки компонентов на макетной плате. Электрические соединения отверстий показаны на рисунке утолщенными линиями.
Шина питания Шина заземления (общая шина)
Шина питания Шина заземления (общая шина)
Область для установки элементов</Text>
      <Pics>
        <Pic>\lessons\lesson_3\pic\pic3.1.jpg</Pic>
      </Pics>
    </Theory>
    <Theory>
      <Title>3.4) Подсоединение светодиодов</Title>
      <Text>Светодиоды почти наверняка будут одними из наиболее часто используемых деталей в проектах из данной книги.
Подключая светодиоды, необходимо соблюдать правильную полярность. Положительный вывод светодиода называется анодом, отрицательный - катодом.
Определить назначение контактов светодиода можно визуально: вывод катода короче, чем анода.
Ток через светодиод течет только в одном направлении: от анода к катоду.
Поскольку ток протекает от положительного полюса к отрицательному, анод светодиода следует подключить к источнику тока (цифровой выход +5 В), а катод к земле.
Резистор может быть подключен последовательно с любым из выводов светодиода.
Полярность подключения для резисторов не важна.
Подключать светодиод к контакту 9 Arduino нужно последовательно с резистором, который выступает в качестве ограничителя тока.
Чем больше сопротивление резистора, тем сильнее он ограничивает ток.
В этом примере мы применим резистор номиналом 220 Ом.
Монтажная схема изображена на рисунке.</Text>
      <Pics>
        <Pic>\lessons\lesson_3\pic\pic3.2.jpg</Pic>
      </Pics>
    </Theory>
    <Theory>
      <Title>3.5.1) Закон Ома и формула для расчета мощности, теория</Title>
      <Text>Самая главная формула для любого инженера-электрика - это закон Ома, который определяет соотношение между напряжением (измеряется в вольтах), током (измеряется в амперах) и сопротивлением (измеряется в Омах) в цепи.
Схема представляет собой замкнутый контур с источником электрической энергии ( например, батареей 9 В) и нагрузкой (чем-то, что расходует энергию, как светодиод).
Прежде всего, важно понять физический смысл каждого термина:
• напряжение представляет собой разность электрических потенциалов между двумя точками;
• ток течет от точки с более высокой потенциальной энергией, чтобы снизить потенциальную энергию.
Пользуясь аналогией, электрический ток можно представить как поток воды, а напряжение - как высоту перепада.
Вода (или ток) всегда течет из точки с большей высотой (более высокое напряжение) к точке с меньшей высотой (или более низкому напряжению).
Ток, как вода в реке, всегда будет идти по пути наименьшего сопротивления в цепи;
по аналогии сопротивление является отверстием для протекания тока.
Когда вода (ток) течет через узкую трубу, за одинаковое количество времени проходит меньшее количество, чем через широкую трубу.
Узкая труба эквивалентна большему сопротивлению, потому что вода будет течь медленнее.
Широкая труба эквивалентна малому сопротивлению, потому что вода (ток) может течь быстрее.
Закон Ома определяется следующим образом:
U = I·R, где U - напряжение в вольтах; I - ток в амперах; R - сопротивление в омах.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>3.5.2) Закон Ома и формула для расчета мощности, практика</Title>
      <Text>В электрической цепи каждый компонент обладает некоторым сопротивлением, что снижает напряжение.
Закон Ома очень удобен для подбора значения резистора, подкточаемого последовательно со светодиодом.
Светодиоды характеризуются определенной величиной падения напряжения и заданным значением рабочего тока.
Чем больше ток через светодиод (не превышая максимально допустимого), тем ярче он светится.
Для наиболее распространенных светодиодов максимальный ток равен 20 мА.
Типовое значение падения напряжения для светодиода составляет около 2 в.
Рассмотрим схему, изображенную на рисунке, и применим закон Ома для подбора резистора R1.
Предположим, что LED 1 - стандартный светодиод с прямым током 20 мА и падением напряжения 2 В.
Напряжение питания 5 В должно перераспределиться между светодиодом и резистором.
Поскольку доля светодиода составляет 2 В, оставшиеся 3 В должны быть приложены к резистору.
Зная максимальное значение прямого тока через светодиод (20 мА), можно найти номинал резистора:
R = U/I= 3/0,02 = 150 Ом.
Таким образом, при сопротивлении резистора 150 Ом через него и светодиод протекает ток 20 мА.
По мере увеличения сопротивления ток будет уменьшаться.
Резистор 220 Ом обеспечивает достаточную яркость свечения светодиода, к тому же этот номинал очень распространен.
Еще одно важное соотношение - формула для расчета мощности, которая показывает, сколько ватт рассеивается на каждом компоненте.
Увеличение мощности рассеивания связано с ростом тепловыделения прибора.
Для каждого компонента, как правило, задается максимально допустимая мощность.
Максимальная мощность резистора в нашем примере равна 0,125 Вт.
Формула для расчета мощности выглядит следующим образом:
Р = U·I, где Р - мощность, Вт; U- напряжение, В; I - сила тока, А.
Для резистора из схемы на рис. 2.3 при падении напряжения 3 В и силе тока 20 мА мощность равна
Р = 3·0,02 = 0,06 Вт.
Поскольку 60 мВт меньше 0,125 Вт = 125 мВт, следовательно, данный резистор не перегреется.</Text>
      <Pics>
        <Pic>\lessons\lesson_3\pic\pic3.3.jpg</Pic>
      </Pics>
    </Theory>
    <Theory>
      <Title>3.6.1) Программирование цифровых выводов</Title>
      <Text>По умолчанию все внешние контакты Arduino сконфигурированы как входы. 
Если необходимо использовать контакт Arduino как выход, нужно его переконфигурировать, подав соответствующую команду микроконтроллеру.
Каждая программа для Arduino должна включать две обязательные функции:
setup() И loop().
В уроке 2 уже упоминалось, что функция setup() запускается один раз в начале программы, а loop() работает как цикл. Поскольку каждый контакт обычно конфигурируется в программе один раз, логично делать это в теле функции setup().
Для начала напишем простую программу, которая при запуске сконфигурирует контакт 9 как выход.
В программе будут еще две функции: pinMode() - для конфигурации контакта и digitalWrite() - для установки значения HIGH (5 В) на этом контакте (листинг 3.1 далее).</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>3.6.2) Листинг 3.1. Пример конфигурации</Title>
      <Text>const int LED=9; // Константа - номер контакта светодиода
void setup()
{
pinMode (LED, OUTPUT); // Конфигурируем контакт светодиода как выход
digitalWrite(LED, HIGH); // Устанавливаем значение HIGH на выходе
}
void loop()
{
// В цикле ничего не выполняем
}</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>3.6.3) О константах и инструкция</Title>
      <Text>Соберите схему, как показано на рисунке, и загрузите код листинга 3.1 в плату Arduino. 
Обратите внимание, что в этой программе использовал оператор инициализации константы перед определением значения контакта Arduino.
Обычно для хранения значений, которые могут изменяться во время выполнения программы, предназначены переменные.
Поставив оператор const до объявления переменной, вы говорите компилятору, что это переменная "только для чтения" и она не будет изменяться во время выполнения программы.
Всем экземплярам переменной LED в программе будет присвоено значение 9.
В виде констант рекомендуется определять значения, которые не будут меняться при выполнении программы.
Далее в некоторых примерах этой главы встретится иная ситуация: значения, которые могут изменяться при выполнении программы.
При объявлении любой переменной необходимо указать ее тип. В нашем случае это целое число (номера контактов всегда будут целыми числами).
Теперь попробуйте изменить программу из главы 2, добавив функцию digitalWrite() и введя задержку в цикле loop().
Экспериментируя со значениями задержки, можно создавать различные эффекты мигания.</Text>
      <Pics>
        <Pic>\lessons\lesson_3\pic\pic3.2.jpg</Pic>
      </Pics>
    </Theory>
    <Theory>
      <Title>3.7.1) Использование цикла, теория</Title>
      <Text>На практике часто необходимо циклически изменять значения переменных для выполнения заданного алгоритма.
В предыдущем примере можно реализовать цикл, чтобы увидеть, как влияют на частоту мигания разные значения задержки.
Вы можете реализовать разные скорости мигания, задавая с помощью переменной цикла различные значения задержки.
Пример иллюстрирует код из листинга 3.2 (далее).</Text>
      <Pics />
    </Theory
    <Theory>
      <Title>3.7.2) Листинг 3.2. Изменение частоты мигания светодиода</Title>
      <Text>const int LED = 9; // Константа - номер контакта светодиода
void setup()
{
	pinMode (LED, OUTPUT); // Конфигурируем контакт светодиода как выход
}
void loop()
{
	for (int i = 100; i <= 1000; i = i + 100)
	{
		digitalWrite(LED, HIGH);
		delay(i);
		digitalWrite(LED, LOW);
		delay(i);
	}
}</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>3.7.3) Пояснение к листингу 3.2</Title>
      <Text>Скомпилируйте код листинга 3.2, загрузите его на свою плату Arduino и посмотрите, что происходит.
Теперь разберемся, как это работает.
Оператор for всегда содержит три выражения, разделенные точкой с запятой:
• первое выражение присваивает начальное значение переменной-счетчику цикла.
В нашем примере переменная i получает начальное значение 100;
• второе выражение указывает, когда цикл должен остановиться. Операторы в теле цикла будут выполняться снова и снова, пока условие истинно.
Запись <= означает меньше или равно.
Таким образом, этот цикл будет выполняться тех пор, пока переменная i меньше или равна 1000;
• последнее выражение указывает, что должно произойти с переменной i каждый раз после выполнения операторов тела цикла.
В нашем примере, значение счетчика цикла увеличивается на 100.
Чтобы лучше понять работу оператора for, подробно рассмотрим, что происходит за два прохода цикла:
1. Значение переменной i равно 100, 100 меньше или равно 1000, значит выполнять код в теле цикла.
2. На контакте 9 установлено значение HIGH, светодиод горит 100 мс (текущее значение i).
3. На контакт 9 подано значение LOW, светодиод потушен 100 мс (текущее значение i).
4. В конце цикла значение переменной i увеличивается на 100, теперь i равно 200.
5. 200 меньше или равно 1000, цикл повторяется снова.
6. На контакте 9 установлено значение HIGH, светодиод горит 200 мс (текущее значение i).
7. На контакт 9 подано значение LOW, светодиод потушен 200 мс (текущее значение i).
8. В конце цикла значение переменной i увеличивается на 100, теперь i равно 300.
9. Этот процесс повторяется, пока i не превосходит 1000 и затем i снова принимает значение 100 и все повторяется заново.
Итак, вы разобрались с работой цифровых контактов платы Arduino.
Далее разберемся, как с помощью ШИМ сформировать аналоговые сигналы на цифровых контактах платы Arduino.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>3.8.1) Широтно-импульсная модуляция с помощью analogWrite(), теория</Title>
      <Text>Вы освоили контроль над цифровыми контактами Arduino.
Они очень удобны для переключения светодиодов, управления реле и двигателями постоянного тока.
Но что делать, если необходимо вывести напряжение, отличное от 0 и 5 В.
С помощью контактов одной только платы Arduino Uno это невозможно.
Придется задействовать цифроаналоговый преобразователь или взять плату Arduino Due или добавить внешнюю микросхему ЦАП(цифро-аналоговый преобразователь).
Тем не менее, можно сымитировать генерацию аналоговых значений на цифровых контактах с помощью широтно-импульсной модуляции (ШИМ).
Для некоторых контактов Arduino сформировать ШИМ-сигнал можно командой analogWrite().
Контакты, которые могут выдавать ШИМ-сигнал на определенные периферийные устройства, помечены символом - на плате Arduino. На Arduino Uno контакты 3, 5, 6, 9, 10, 11 поддерживают выдачу ШИМ-сигнала.
При наличии Arduino Uno проверить команду analogWrite() можно с помощью схемы, изображенной на рисунке.
Если уменьшить напряжение на контакте 9 Arduino, яркость свечения светодиода должна стать меньше, потому что снизится ток, текущий через него.
Этого эффекта можно добиться с помощью ШИМ и команды analogWrite().
Функция analogWrite() имеет два аргумента: номер контакта и 8-разрядное значение в диапазоне от 0 до 255, устанавливаемое на этом контакте.
В листинге 3.3 приведен код программы генерации ШИМ-сигнала на контакте 9 для плавного управления яркостью светодиода.</Text>
      <Pics>
        <Pic>\lessons\lesson_3\pic\pic3.1.jpg</Pic>
      </Pics>
    </Theory>
    <Theory>
      <Title>3.8.2) Листинг 3.3. Плавное изменение яркости светодиода — fade.ino</Title>
      <Text>const int LED = 9; // Константа номера контакта светодиода
void setup()
{
	pinMode (LED, OUTPUT); // Конфигурируем контакт светодиода как выход
}
void loop()
{
	for (int i = 0; i < 256; i++)
	{
		analogWrite(LED, i);
		delay (10);
	}
	for (int i = 255; i >= 0; i--)
	{
		analogWrite(LED, i);
		delay(10);
	}
}</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>3.8.3) Пояснение к листингу 3.3. Плавное изменение яркости светодиода — fade.ino</Title>
      <Text>Что будет происходить со светодиодом при выполнении листинга 2.3?
Вы будете наблюдать, как свечение светодиода изменяется от тусклого к яркому в одном цикле for, а затем от яркого к тусклому в другом цикле for.
Все это будет происходить в основном цикле loop() до бесконечности.
Обязательно обратите внимание на различие двух циклов for.
В первом цикле выражение i++ является сокращением кода i = i + 1.
Аналогично, запись i-- эквивалентна коду i = i - 1.
Первый цикл плавно зажигает светодиод до его максимальной яркости, второй - постепенно гасит его.
Во многих случаях ШИМ пригодна для эмуляции аналогового выхода, но когда требуется неискаженный аналоговый сигнал, этот вариант неприемлем.
Например, ШИМ отлично подходит для регулировки скорости двигателя постоянного тока (примеры будут приведены в следующих главах), но не годится для управления аудиоколонками (без дополнительной внешней схемы).</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>3.8.4) Описание работы ШИМ</Title>
      <Text>Чтобы понять все тонкости, разберемся, как на самом деле работает ШИМ.
Рассмотрим графики, представленные на рисунке.
ШИМ представляет собой изменение скважности ( отношения периода к длительности импульса) прямоугольной последовательности импульсов.
Скважность можно трактовать как процент времени, когда прямоугольный импульс имеет уровень HIGH, ко всему периоду повторения.
Скважность 50% означает, что половину периода сигнал имеет высокий уровень, а половину - низкий.
Функция analogWrite() устанавливает скважность последовательности прямоугольных импульсов в зависимости от значения, передаваемого ей:
• значение аргумента analogWrite(), равное нулю, задает скважность 0% (всегда LOW);
• значение 255 -скважность 100% (всегда HIGH);
• значение 127 соответствует скважности 50% (половина времени HIGH, половина времени LOW).
На графиках видно, что для сигнала со скважностью 25% значение HIGH действует в течение четверти периода, а остальные 75% времени установлено значение LOW.
Частота прямоугольной последовательности импульсов в случае с Arduino составляет приблизительно 490 Гц.
Другими словами, уровень сигнала меняется от высокого (5 В) к низкому (0 В) приблизительно 490 раз каждую секунду.
Как видим, напряжение, подаваемое на светодиод, на самом деле не понижается, почему же при уменьшении скважности наблюдается спад яркости свечения светодиода?
Это связано с особенностью нашего зрения.
Если светодиод включается и выключается один раз за 1 мс (при скважности 50%), то вам кажется, что яркость свечения светодиода составляет приблизительно 50% от максимальной, потому что переключение происходит быстрее, чем глаза могут это зафиксировать.
Ваш мозг фактически усредняет сигнал и создается впечатление, что светодиод работает на половине яркости.</Text>
      <Pics>
        <Pic>\lessons\lesson_3\pic\pic3.4.jpg</Pic>
      </Pics>
    </Theory>
    <Theory>
      <Title>info11</Title>
      <Text>test_text_11</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>info11</Title>
      <Text>test_text_11</Text>
      <Pics>
        <Pic>\lessons\lesson_3\pic\pic3.1.jpg</Pic>
      </Pics>
    </Theory>
  </Theories>
  <Tests>
    <Test>
      <Title>test11</Title>
      <Pics />
      <Text>test_test_11</Text>
      <Variants>
        <Variant>False1</Variant>
        <Variant>False2</Variant>
        <Variant>True</Variant>
        <Variant>False3</Variant>
      </Variants>
      <Answer>2</Answer>
    </Test>
    <Test>
      <Title>test12</Title>
      <Pics>
        <Pic>\lessons\test_lesson_1\pic\pic1.jpg</Pic>
      </Pics>
      <Text>test_test_12</Text>
      <Variants>
        <Variant>False1</Variant>
        <Variant>False2</Variant>
        <Variant>True</Variant>
        <Variant>False3</Variant>
      </Variants>
      <Answer>2</Answer>
    </Test>
  </Tests>
</Lesson>