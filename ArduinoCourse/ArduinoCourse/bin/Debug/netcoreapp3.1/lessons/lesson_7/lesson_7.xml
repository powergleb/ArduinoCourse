<Lesson>
  <Title>Урок 7. Устранение "дребезга" кнопок</Title>
  <Theories>
    <Theory>
      <Title>7.1) Список деталей</Title>
      <Text>Для повторения примеров главы понадобятся следующие детали:
• плата Arduino Uno;
• макетная плата;
• перемычки;
• 1 резистор номиналом 10 кОм;
• 3 резистора номиналом 220 Ом;
• кабель USB;
• кнопка;
• одноцветный светодиод 5 мм;
• RGB-светодиод 5 мм с общим катодом.
У большинства плат Arduino нет аналоговых выходов, но их можно эмулировать с помощью широтно-импульсной модуляции (ШИМ).
Далее мы расскажем, как сформировать ШИМ-сигнал.
Прочитав главу, вы сможете создать ночник на RGB-светодиоде.
Проект с мигающим светодиодом, рассмотренный в предыдущей главе, скорее игрушка, чем полезное устройство.
Действительно привлекательной для разработчиков делает платформу Arduino наличие контактов ввода-вывода.
К плате можно подключить, например, геркон, и при открытии двери проигрывать какую-либо мелодию или создать электронный сейф, или несложный музыкальный инструмент.
В этом уроке вы приступите к разработке новых проектов: познакомитесь с возможностями цифровых входов Arduino, узнаете о подтягивающих (pull-up) и стягивающих (pull-down) резисторах и научитесь управлять цифровыми выходами.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>7.2) Проблема "дребезга" кнопок</Title>
      <Text>Удобно ли держать кнопку постоянно нажатой для свечения светодиода? 
Гораздо лучше иметь возможность нажать кнопку один раз, чтобы включить светодиод, и нажав ее еще раз, выключить.
При таком варианте, для горения светодиода кнопку не придется удерживать нажатой.
К сожалению, сделать это не так легко, как кажется.
Нельзя просто считывать значение сигнала на входе, необходимо учитывать явление, называемое дребезгом контактов.
Обычные кнопки представляют собой механические устройства с пружинным контактом.
При нажатии на кнопку сигнал не просто меняется от низкого до высокого, он на протяжении нескольких миллисекунд неоднократно меняет свое значение, прежде чем установится уровень LOW.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>7.3) Осцилограмма "дребезга" кнопок</Title>
      <Text>Отличие ожидаемого процесса от реального иллюстрируют осциллограммы сигнала с кнопки, приведенные на рисунке.
Кнопка была физически нажата в течение 25 мс. 
Предположение, что состояние кнопки можно определить, считав значение с входа контакта (график слева) неверно. 
Кнопка фактически возвращается вверх-вниз, пока значение не установится (график справа). 
Теперь, зная, как ведет себя кнопка, можно написать программу для кнопки с дребезгом, которая фиксирует изменение состояния кнопки, некоторое время ждет и затем снова читает состояние переключателя.</Text>
      <Pics>
        <Pic>\lessons\lesson_7\pic\pic7.6.jpg</Pic>
      </Pics>
    </Theory>
    <Theory>
      <Title>7.4) Алгоритм устранения "дребезга" кнопок</Title>
      <Text>Алгоритм работы такой программы можно записать следующим образом:
1. Сохраняем предыдущее и текущее состояния кнопки (при инициализации LOW).
2. Считываем текущее состояние кнопки.
3. Если текущее состояние кнопки отличается от предыдущего, ждем 5 мс, потому что кнопка, возможно, изменит свое состояние.
4. Подождав 5 мс, считываем состояние кнопки и делаем его текущим состоянием кнопки.
5. Если предыдущее состояние кнопки было LOW, а текущее - HIGH, переключаем состояние светодиода.
6. Устанавливаем предыдущее состояние кнопки в качестве текущего.
7. Возвращаемся к шагу 2.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>7.5) Комментарий к алгоритму</Title>
      <Text>Данный алгоритм - прекрасный пример для изучения функций.
Функция - это оператор, который может принимать входные аргументы, выполнять фрагмент кода с их использованием и, возможно, возвращать результат. 
Не зная этого, вы уже встречали функции в программах. 
Например, digitalWrite() - это функция, которая принимает в качестве аргументов номер контакта и значение (HIGH или LOW), и устанавливает это значение на контакте. 
Чтобы упростить программу, можно определить свои собственные функции для инкапсуляции действий, которые придется повторять неоднократно.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>7.6) Комментарий к программе</Title>
      <Text>Процесс выполнения программы представляет собой многократное повторение шагов.
Напишем функцию для устранения дребезга контактов, которую можно вызывать неоднократно.
Наша функция будет принимать предыдущее состояние кнопки в качестве входных данных, выполнять противодребезговую защиту и выводить установившееся состояние кнопки.
Основной цикл программы переключает состояние светодиода при каждом нажатии кнопки.
Загрузите код листинга 7.1 в плату Arduino и посмотрите, как он работает.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>7.7) Листинг 7.1. Подавление дребезга кнопки — debounce.ino</Title>
      <Text>const int LED = 9; // Контакт 9 для подключения светодиода
const int BUTTON = 2; // Контакт 2 для подключения кнопки
boolean lastButton = LOW;// Переменная для сохранения предыдущего
// состояния кнопки
boolean currentButton = LOW;// Переменная для сохранения текущего
// состояния кнопки
boolean ledOn = false;// Текущее состояние светодиода
//(включен/выключен)
void setup()
{
 pinMode (LED, OUTPUT);// Сконфигурировать контакт светодиода как выход
 pinMode (BUTTON, INPUT);//Сконфигурировать контакт кнопки как вход
}
/*
* Функция сглаживания дребезга
* принимает в качестве аргумента предыдущее состояние кнопки
* и выдает фактическое.
*/
boolean debounce(boolean last)
{
	boolean current = digitalRead(BUTTON);// Считать состояние кнопки
	if (last != current)// Если изменилось...
	{
		delay(5);// Ждем 5 мс
		current = digitalRead(BUTTON);// Считываем состояние кнопки
		return current;// Возвращаем состояние кнопки
	}
}
void loop()
{
	currentButton = debounce(lastButton);
	if (lastButton == LOW &amp;&amp; currentButton == HIGH) // Если нажатие
	{
		ledOn = !ledOn;// Инвертировать значение состояния светодиода
	}
	lastButton = currentButton;
	digitalWrite(LED, ledOn);// Изменить статус состояния светодиода
}</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>7.8) Описание листина</Title>
      <Text>Теперь рассмотрим текст листинга 7.1 подробнее.
Сначала заданы номера контактов для подключения кнопки и светодиода.
Затем объявлены три глобальные логические переменные, которые будут изменяться в программе (значение глобальной переменной можно менять в любой части программы).
Каждой из трех переменных присвоены начальные значения (LOW, LOW и false).
Далее в программе значения этих переменных могут изменяться с помощью оператора присваивания =.
Рассмотрим функцию подавления дребезга кнопки boolean debounce().
Эта функция принимает логическую переменную (имеющую только два состояния: true/false, HIGH/LOW, вкл./выкл., 1/0) предыдущего состояния кнопки и возвращает текущее значение состояния кнопки. 
Внутри функции текущее состояние кнопки сравнивается с предыдущим с помощью оператора != (не равно). Если состояния отличаются, то кнопка, возможно, нажата. 
Затем ожидаем 5 мс (этого достаточно, чтобы состояние кнопки стабилизировалось после дребезга), прежде чем проверить состояние кнопки снова. 
Затем вновь проверяем состояние кнопки. Как вы помните, функции могут возвращать результат. 
Данная функция возвращает текущее значение булевой локальной переменной, которая объявлена и используется только в функции debounce().Когда функция debounce() вызывается из основного цикла, возвращенное значение записывается в глобальную переменную currentButton, которая была определена в начале программы.
После вызова функции debounce() и установки значения переменной currentButton происходит сравнение текущего и предыдущего значений состояния кнопки с помощью оператора &amp;&amp;
(логический оператор "И", означающий, что выражение в скобках выполнится, только если истинно каждое из равенств, разделенных оператором &amp;&amp;).
Если ранее состояние кнопки было LOW, а теперь HIGH, значит, кнопка была нажата и нужно инвертировать значение переменной lecton.
Это действие выполняет оператор перед переменной lecton.
Цикл закончен, обновляем предыдущую перемеую состояния кнопки и изменяем состояние светодиода.
Программа изменяет состояние светодиода после каждого нажатия кнопки.
При отсутствии проверки дребезга кнопки результаты будут непредсказуемыми.</Text>
      <Pics />
    </Theory>  
    <Theory>
      <Title>Итоги</Title>
      <Text>В этом уроке вы узнали о следующем:
•Как работать с макетной платой.
•Как выбрать резистор для ограничения тока светодиода.
•Как подключить внешний светодиод к плате Arduino.
•Как использовать ШИМ, как замену аналогового вывода.
•Как считывать состояние кнопки.
•Как подавить дребезг кнопки.
•Для чего нужны подтягивающий и стягивающий резисторы.</Text>
      <Pics />
    </Theory>
  </Theories>
  <Tests>
    <Test>
      <Title>7.1)Проблема "дребезга" кнопок</Title>
      <Pics />
      <Text>Что представляет из себя дребезг контактов?
1 - Безразмерная величина, равная отношению мощности полезного сигнала к мощности шума.
2 - Явление, происходящее в электромеханических коммутационных устройствах и аппаратах, длящееся некоторое время до замыкания электрических контактов.
3 - Явление, происходящее в электромеханических коммутационных устройствах и аппаратах, длящееся некоторое время после замыкания электрических контактов.
4 - Явление, при котором тела приобретают свойства притягивать другие тела.</Text>
      <Variants>
		<Variant>1</Variant>
        <Variant>2</Variant>
        <Variant>3</Variant>
        <Variant>4</Variant>
      </Variants>
      <Answer>2</Answer>
    </Test>
	 <Test>
      <Title>7.2) Анализ листинга</Title>
      <Pics />
      <Text>const int LED = 9; 
const int BUTTON = 2; 
boolean lastButton = LOW;
boolean currentButton = LOW;
boolean ledOn = false;
void setup()
{
 pinMode (LED, OUTPUT);
 pinMode (BUTTON, INPUT);
}
boolean debounce(boolean last)
{
	boolean current = digitalRead(BUTTON);
	if (last != current)
	{
		delay(5);
		current = digitalRead(BUTTON);
		return current;
	}
}
void loop()
{
	currentButton = debounce(lastButton);
	if (lastButton == LOW &amp;&amp; currentButton == HIGH) 
	{
		ledOn = !ledOn;
	}
	lastButton = currentButton;
	digitalWrite(LED, ledOn);
}
в какой функции подавляется дребезг?</Text>
      <Variants>
        <Variant>loop</Variant>
        <Variant>debounce</Variant>
        <Variant>setup</Variant>
      </Variants>
      <Answer>1</Answer>
    </Test>
  </Tests>
</Lesson>