<Lesson>
  <Title>Урок 5. Цифровые контакты ввода-вывода шиотно-импульсная модуляция</Title>
  <Theories>
    <Theory>
      <Title>3.1) Список деталей</Title>
      <Text>Для повторения примеров главы понадобятся следующие детали:
• плата Arduino Uno;
• макетная плата;
• перемычки;
• 1 резистор номиналом 10 кОм;
• 3 резистора номиналом 220 Ом;
• кабель USB;
• кнопка;
• одноцветный светодиод 5 мм;
• RGB-светодиод 5 мм с общим катодом.
У большинства плат Arduino нет аналоговых выходов, но их можно эмулировать с помощью широтно-импульсной модуляции (ШИМ).
Далее мы расскажем, как сформировать ШИМ-сигнал.
Прочитав главу, вы сможете создать ночник на RGB-светодиоде.
Проект с мигающим светодиодом, рассмотренный в предыдущей главе, скорее игрушка, чем полезное устройство.
Действительно привлекательной для разработчиков делает платформу Arduino наличие контактов ввода-вывода.
К плате можно подключить, например, геркон, и при открытии двери проигрывать какую-либо мелодию или создать электронный сейф, или несложный музыкальный инструмент.
В этом уроке вы приступите к разработке новых проектов: познакомитесь с возможностями цифровых входов Arduino, узнаете о подтягивающих (pull-up) и стягивающих (pull-down) резисторах и научитесь управлять цифровыми выходами.</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>3.8.1) Широтно-импульсная модуляция с помощью analogWrite(), теория</Title>
      <Text>Вы освоили контроль над цифровыми контактами Arduino.
Они очень удобны для переключения светодиодов, управления реле и двигателями постоянного тока.
Но что делать, если необходимо вывести напряжение, отличное от 0 и 5 В.
С помощью контактов одной только платы Arduino Uno это невозможно.
Придется задействовать цифроаналоговый преобразователь или взять плату Arduino Due или добавить внешнюю микросхему ЦАП(цифро-аналоговый преобразователь).
Тем не менее, можно сымитировать генерацию аналоговых значений на цифровых контактах с помощью широтно-импульсной модуляции (ШИМ).
Для некоторых контактов Arduino сформировать ШИМ-сигнал можно командой analogWrite().
Контакты, которые могут выдавать ШИМ-сигнал на определенные периферийные устройства, помечены символом - на плате Arduino. На Arduino Uno контакты 3, 5, 6, 9, 10, 11 поддерживают выдачу ШИМ-сигнала.
При наличии Arduino Uno проверить команду analogWrite() можно с помощью схемы, изображенной на рисунке.
Если уменьшить напряжение на контакте 9 Arduino, яркость свечения светодиода должна стать меньше, потому что снизится ток, текущий через него.
Этого эффекта можно добиться с помощью ШИМ и команды analogWrite().
Функция analogWrite() имеет два аргумента: номер контакта и 8-разрядное значение в диапазоне от 0 до 255, устанавливаемое на этом контакте.
В листинге 3.3 приведен код программы генерации ШИМ-сигнала на контакте 9 для плавного управления яркостью светодиода.</Text>
      <Pics>
        <Pic>\lessons\lesson_3\pic\pic3.1.jpg</Pic>
      </Pics>
    </Theory>
    <Theory>
      <Title>3.8.2) Листинг 3.3. Плавное изменение яркости светодиода — fade.ino</Title>
      <Text>const int LED = 9; // Константа номера контакта светодиода
void setup()
{
	pinMode (LED, OUTPUT); // Конфигурируем контакт светодиода как выход
}
void loop()
{
	for (int i = 0; i &lt; 256; i++)
	{
		analogWrite(LED, i);
		delay (10);
	}
	for (int i = 255; i >= 0; i--)
	{
		analogWrite(LED, i);
		delay(10);
	}
}</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>3.8.3) Пояснение к листингу 3.3. Плавное изменение яркости светодиода — fade.ino</Title>
      <Text>Что будет происходить со светодиодом при выполнении листинга 2.3?
Вы будете наблюдать, как свечение светодиода изменяется от тусклого к яркому в одном цикле for, а затем от яркого к тусклому в другом цикле for.
Все это будет происходить в основном цикле loop() до бесконечности.
Обязательно обратите внимание на различие двух циклов for.
В первом цикле выражение i++ является сокращением кода i = i + 1.
Аналогично, запись i-- эквивалентна коду i = i - 1.
Первый цикл плавно зажигает светодиод до его максимальной яркости, второй - постепенно гасит его.
Во многих случаях ШИМ пригодна для эмуляции аналогового выхода, но когда требуется неискаженный аналоговый сигнал, этот вариант неприемлем.
Например, ШИМ отлично подходит для регулировки скорости двигателя постоянного тока (примеры будут приведены в следующих главах), но не годится для управления аудиоколонками (без дополнительной внешней схемы).</Text>
      <Pics />
    </Theory>
    <Theory>
      <Title>3.8.4) Тонкости работы ШИМ</Title>
      <Text>Чтобы понять все тонкости, разберемся, как на самом деле работает ШИМ.
Рассмотрим графики, представленные на рисунке.
ШИМ представляет собой изменение скважности (отношения периода к длительности импульса) прямоугольной последовательности импульсов.
Скважность можно трактовать как процент времени, когда прямоугольный импульс имеет уровень HIGH, ко всему периоду повторения.
Скважность 50% означает, что половину периода сигнал имеет высокий уровень, а половину - низкий.
Функция analogWrite() устанавливает скважность последовательности прямоугольных импульсов в зависимости от значения, передаваемого ей:
• значение аргумента analogWrite(), равное нулю, задает скважность 0% (всегда LOW);
• значение 255 -скважность 100% (всегда HIGH);
• значение 127 соответствует скважности 50% (половина времени HIGH, половина времени LOW).
На графиках видно, что для сигнала со скважностью 25% значение HIGH действует в течение четверти периода, а остальные 75% времени установлено значение LOW.
Частота прямоугольной последовательности импульсов в случае с Arduino составляет приблизительно 490 Гц.
Другими словами, уровень сигнала меняется от высокого (5 В) к низкому (0 В) приблизительно 490 раз каждую секунду.
Как видим, напряжение, подаваемое на светодиод, на самом деле не понижается, почему же при уменьшении скважности наблюдается спад яркости свечения светодиода?
Это связано с особенностью нашего зрения.
Если светодиод включается и выключается один раз за 1 мс (при скважности 50%), то вам кажется, что яркость свечения светодиода составляет приблизительно 50% от максимальной, потому что переключение происходит быстрее, чем глаза могут это зафиксировать.
Ваш мозг фактически усредняет сигнал и создается впечатление, что светодиод работает на половине яркости.</Text>
      <Pics>
        <Pic>\lessons\lesson_3\pic\pic3.4.jpg</Pic>
      </Pics>
    </Theory>
    <Theory>
      <Title>Итоги</Title>
      <Text>В этом уроке вы узнали о следующем:
•Как работать с макетной платой.
•Как выбрать резистор для ограничения тока светодиода.
•Как подключить внешний светодиод к плате Arduino.
•Как использовать ШИМ, как замену аналогового вывода.
•Как считывать состояние кнопки.
•Как подавить дребезг кнопки.
•Для чего нужны подтягивающий и стягивающий резисторы.</Text>
      <Pics />
    </Theory>
  </Theories>
  <Tests>
    <Test>
      <Title>test</Title>
      <Pics />
      <Text>test</Text>
      <Variants>
        <Variant>False1</Variant>
        <Variant>False2</Variant>
        <Variant>True</Variant>
        <Variant>False3</Variant>
      </Variants>
      <Answer>2</Answer>
    </Test>
  </Tests>
</Lesson>